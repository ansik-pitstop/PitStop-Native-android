package com.pitstop.models.trip;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_END".
*/
public class LocationEndDao extends AbstractDao<LocationEnd, Long> {

    public static final String TABLENAME = "LOCATION_END";

    /**
     * Properties of entity LocationEnd.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Altitude = new Property(1, String.class, "altitude", false, "ALTITUDE");
        public final static Property Latitude = new Property(2, String.class, "latitude", false, "LATITUDE");
        public final static Property Longitude = new Property(3, String.class, "longitude", false, "LONGITUDE");
        public final static Property EndLocation = new Property(4, String.class, "endLocation", false, "END_LOCATION");
        public final static Property EndCityLocation = new Property(5, String.class, "endCityLocation", false, "END_CITY_LOCATION");
        public final static Property EndStreetLocation = new Property(6, String.class, "endStreetLocation", false, "END_STREET_LOCATION");
        public final static Property Trip = new Property(7, Long.class, "trip", false, "TRIP");
    }

    private DaoSession daoSession;


    public LocationEndDao(DaoConfig config) {
        super(config);
    }
    
    public LocationEndDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_END\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ALTITUDE\" TEXT," + // 1: altitude
                "\"LATITUDE\" TEXT," + // 2: latitude
                "\"LONGITUDE\" TEXT," + // 3: longitude
                "\"END_LOCATION\" TEXT," + // 4: endLocation
                "\"END_CITY_LOCATION\" TEXT," + // 5: endCityLocation
                "\"END_STREET_LOCATION\" TEXT," + // 6: endStreetLocation
                "\"TRIP\" INTEGER);"); // 7: trip
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_END\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationEnd entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindString(2, altitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(3, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String endLocation = entity.getEndLocation();
        if (endLocation != null) {
            stmt.bindString(5, endLocation);
        }
 
        String endCityLocation = entity.getEndCityLocation();
        if (endCityLocation != null) {
            stmt.bindString(6, endCityLocation);
        }
 
        String endStreetLocation = entity.getEndStreetLocation();
        if (endStreetLocation != null) {
            stmt.bindString(7, endStreetLocation);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationEnd entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String altitude = entity.getAltitude();
        if (altitude != null) {
            stmt.bindString(2, altitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(3, latitude);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(4, longitude);
        }
 
        String endLocation = entity.getEndLocation();
        if (endLocation != null) {
            stmt.bindString(5, endLocation);
        }
 
        String endCityLocation = entity.getEndCityLocation();
        if (endCityLocation != null) {
            stmt.bindString(6, endCityLocation);
        }
 
        String endStreetLocation = entity.getEndStreetLocation();
        if (endStreetLocation != null) {
            stmt.bindString(7, endStreetLocation);
        }
    }

    @Override
    protected final void attachEntity(LocationEnd entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LocationEnd readEntity(Cursor cursor, int offset) {
        LocationEnd entity = new LocationEnd( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // altitude
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // longitude
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // endLocation
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // endCityLocation
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // endStreetLocation
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationEnd entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAltitude(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLongitude(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEndLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setEndCityLocation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEndStreetLocation(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocationEnd entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocationEnd entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationEnd entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getTripDao().getAllColumns());
            builder.append(" FROM LOCATION_END T");
            builder.append(" LEFT JOIN TRIP T0 ON T.\"TRIP\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected LocationEnd loadCurrentDeep(Cursor cursor, boolean lock) {
        LocationEnd entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Trip trip = loadCurrentOther(daoSession.getTripDao(), cursor, offset);
        entity.setTrip(trip);

        return entity;    
    }

    public LocationEnd loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<LocationEnd> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<LocationEnd> list = new ArrayList<LocationEnd>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<LocationEnd> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<LocationEnd> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
